
UART_DHT11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08001234  08001234  00011234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001298  08001298  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08001298  08001298  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001298  08001298  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001298  08001298  00011298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800129c  0800129c  0001129c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080012a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00000034  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000a0  200000a0  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000231e  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000009d8  00000000  00000000  000223ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002c0  00000000  00000000  00022d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000228  00000000  00000000  00023058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f5f4  00000000  00000000  00023280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000490d  00000000  00000000  00042874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1748  00000000  00000000  00047181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001088c9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000be4  00000000  00000000  0010891c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800121c 	.word	0x0800121c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800121c 	.word	0x0800121c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <clockConfig>:

#define PLL_M 4
#define PLL_N 168
#define PLL_P 2

void clockConfig(){
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSEON;
 8000274:	4b25      	ldr	r3, [pc, #148]	; (800030c <clockConfig+0x9c>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a24      	ldr	r2, [pc, #144]	; (800030c <clockConfig+0x9c>)
 800027a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800027e:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY));
 8000280:	bf00      	nop
 8000282:	4b22      	ldr	r3, [pc, #136]	; (800030c <clockConfig+0x9c>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800028a:	2b00      	cmp	r3, #0
 800028c:	d0f9      	beq.n	8000282 <clockConfig+0x12>

	//config PLL
	RCC->PLLCFGR = RCC->PLLCFGR = (PLL_M << RCC_PLLCFGR_PLLM_Pos) |(PLL_N << RCC_PLLCFGR_PLLN_Pos) |
 800028e:	4a1f      	ldr	r2, [pc, #124]	; (800030c <clockConfig+0x9c>)
 8000290:	4b1f      	ldr	r3, [pc, #124]	; (8000310 <clockConfig+0xa0>)
 8000292:	6053      	str	r3, [r2, #4]
 8000294:	4a1d      	ldr	r2, [pc, #116]	; (800030c <clockConfig+0x9c>)
 8000296:	6053      	str	r3, [r2, #4]
            	   (((PLL_P >> 1) - 1) << RCC_PLLCFGR_PLLP_Pos) | (RCC_PLLCFGR_PLLSRC_HSE);
	//enable PLL
	RCC->CR |= RCC_CR_PLLON;
 8000298:	4b1c      	ldr	r3, [pc, #112]	; (800030c <clockConfig+0x9c>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a1b      	ldr	r2, [pc, #108]	; (800030c <clockConfig+0x9c>)
 800029e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002a2:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));
 80002a4:	bf00      	nop
 80002a6:	4b19      	ldr	r3, [pc, #100]	; (800030c <clockConfig+0x9c>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d0f9      	beq.n	80002a6 <clockConfig+0x36>

	// Configure Flash prefetch, instruction cache, data cache
	FLASH->ACR = FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_PRFTEN | FLASH_ACR_LATENCY_5WS;
 80002b2:	4b18      	ldr	r3, [pc, #96]	; (8000314 <clockConfig+0xa4>)
 80002b4:	f240 7205 	movw	r2, #1797	; 0x705
 80002b8:	601a      	str	r2, [r3, #0]

	//choose PLL as clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 80002ba:	4b14      	ldr	r3, [pc, #80]	; (800030c <clockConfig+0x9c>)
 80002bc:	689b      	ldr	r3, [r3, #8]
 80002be:	4a13      	ldr	r2, [pc, #76]	; (800030c <clockConfig+0x9c>)
 80002c0:	f023 0303 	bic.w	r3, r3, #3
 80002c4:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80002c6:	4b11      	ldr	r3, [pc, #68]	; (800030c <clockConfig+0x9c>)
 80002c8:	689b      	ldr	r3, [r3, #8]
 80002ca:	4a10      	ldr	r2, [pc, #64]	; (800030c <clockConfig+0x9c>)
 80002cc:	f043 0302 	orr.w	r3, r3, #2
 80002d0:	6093      	str	r3, [r2, #8]
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80002d2:	bf00      	nop
 80002d4:	4b0d      	ldr	r3, [pc, #52]	; (800030c <clockConfig+0x9c>)
 80002d6:	689b      	ldr	r3, [r3, #8]
 80002d8:	f003 030c 	and.w	r3, r3, #12
 80002dc:	2b08      	cmp	r3, #8
 80002de:	d1f9      	bne.n	80002d4 <clockConfig+0x64>

	//config prescaler
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80002e0:	4b0a      	ldr	r3, [pc, #40]	; (800030c <clockConfig+0x9c>)
 80002e2:	4a0a      	ldr	r2, [pc, #40]	; (800030c <clockConfig+0x9c>)
 80002e4:	689b      	ldr	r3, [r3, #8]
 80002e6:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80002e8:	4b08      	ldr	r3, [pc, #32]	; (800030c <clockConfig+0x9c>)
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	4a07      	ldr	r2, [pc, #28]	; (800030c <clockConfig+0x9c>)
 80002ee:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80002f2:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80002f4:	4b05      	ldr	r3, [pc, #20]	; (800030c <clockConfig+0x9c>)
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	4a04      	ldr	r2, [pc, #16]	; (800030c <clockConfig+0x9c>)
 80002fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002fe:	6093      	str	r3, [r2, #8]
}
 8000300:	bf00      	nop
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	40023800 	.word	0x40023800
 8000310:	00402a04 	.word	0x00402a04
 8000314:	40023c00 	.word	0x40023c00

08000318 <delay_us>:

#define DHT11_PORT GPIOD
#define DHT11_PIN  GPIO_PIN_2
#define DHT11_PIN_NUMBER 2

void delay_us(uint32_t us) {
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
    SysTick->LOAD = (SystemCoreClock / 1000000 - 1) * us;
 8000320:	4b10      	ldr	r3, [pc, #64]	; (8000364 <delay_us+0x4c>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a10      	ldr	r2, [pc, #64]	; (8000368 <delay_us+0x50>)
 8000326:	fba2 2303 	umull	r2, r3, r2, r3
 800032a:	0c9b      	lsrs	r3, r3, #18
 800032c:	3b01      	subs	r3, #1
 800032e:	490f      	ldr	r1, [pc, #60]	; (800036c <delay_us+0x54>)
 8000330:	687a      	ldr	r2, [r7, #4]
 8000332:	fb02 f303 	mul.w	r3, r2, r3
 8000336:	604b      	str	r3, [r1, #4]
    SysTick->VAL = 0;
 8000338:	4b0c      	ldr	r3, [pc, #48]	; (800036c <delay_us+0x54>)
 800033a:	2200      	movs	r2, #0
 800033c:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = SysTick_CTRL_ENABLE_Msk;
 800033e:	4b0b      	ldr	r3, [pc, #44]	; (800036c <delay_us+0x54>)
 8000340:	2201      	movs	r2, #1
 8000342:	601a      	str	r2, [r3, #0]
    while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk));
 8000344:	bf00      	nop
 8000346:	4b09      	ldr	r3, [pc, #36]	; (800036c <delay_us+0x54>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800034e:	2b00      	cmp	r3, #0
 8000350:	d0f9      	beq.n	8000346 <delay_us+0x2e>
    SysTick->CTRL = 0;
 8000352:	4b06      	ldr	r3, [pc, #24]	; (800036c <delay_us+0x54>)
 8000354:	2200      	movs	r2, #0
 8000356:	601a      	str	r2, [r3, #0]
}
 8000358:	bf00      	nop
 800035a:	370c      	adds	r7, #12
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr
 8000364:	20000000 	.word	0x20000000
 8000368:	431bde83 	.word	0x431bde83
 800036c:	e000e010 	.word	0xe000e010

08000370 <DHT11_SetPinOutput>:

void DHT11_SetPinOutput(void) {
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
    DHT11_PORT->MODER |= (1U << (DHT11_PIN_NUMBER * 2));
 8000374:	4b05      	ldr	r3, [pc, #20]	; (800038c <DHT11_SetPinOutput+0x1c>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a04      	ldr	r2, [pc, #16]	; (800038c <DHT11_SetPinOutput+0x1c>)
 800037a:	f043 0310 	orr.w	r3, r3, #16
 800037e:	6013      	str	r3, [r2, #0]
}
 8000380:	bf00      	nop
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	40020c00 	.word	0x40020c00

08000390 <DHT11_SetPinInput>:

void DHT11_SetPinInput(void) {
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
    DHT11_PORT->MODER &= ~(1U << (DHT11_PIN_NUMBER * 2));
 8000394:	4b05      	ldr	r3, [pc, #20]	; (80003ac <DHT11_SetPinInput+0x1c>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a04      	ldr	r2, [pc, #16]	; (80003ac <DHT11_SetPinInput+0x1c>)
 800039a:	f023 0310 	bic.w	r3, r3, #16
 800039e:	6013      	str	r3, [r2, #0]
}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	40020c00 	.word	0x40020c00

080003b0 <DHT11_Start>:

void DHT11_Start(void) {
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
    DHT11_SetPinOutput();
 80003b4:	f7ff ffdc 	bl	8000370 <DHT11_SetPinOutput>
    DHT11_PORT->ODR &= ~DHT11_PIN;
 80003b8:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <DHT11_Start+0x38>)
 80003ba:	695b      	ldr	r3, [r3, #20]
 80003bc:	4a0a      	ldr	r2, [pc, #40]	; (80003e8 <DHT11_Start+0x38>)
 80003be:	f023 0304 	bic.w	r3, r3, #4
 80003c2:	6153      	str	r3, [r2, #20]
    delay_us(18000);
 80003c4:	f244 6050 	movw	r0, #18000	; 0x4650
 80003c8:	f7ff ffa6 	bl	8000318 <delay_us>
    DHT11_PORT->ODR |= DHT11_PIN;
 80003cc:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <DHT11_Start+0x38>)
 80003ce:	695b      	ldr	r3, [r3, #20]
 80003d0:	4a05      	ldr	r2, [pc, #20]	; (80003e8 <DHT11_Start+0x38>)
 80003d2:	f043 0304 	orr.w	r3, r3, #4
 80003d6:	6153      	str	r3, [r2, #20]
    delay_us(20);
 80003d8:	2014      	movs	r0, #20
 80003da:	f7ff ff9d 	bl	8000318 <delay_us>
    DHT11_SetPinInput();
 80003de:	f7ff ffd7 	bl	8000390 <DHT11_SetPinInput>
}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	40020c00 	.word	0x40020c00

080003ec <DHT11_CheckResponse>:

uint8_t DHT11_CheckResponse(void) {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
    uint8_t response = 0;
 80003f2:	2300      	movs	r3, #0
 80003f4:	71fb      	strb	r3, [r7, #7]
    delay_us(40);
 80003f6:	2028      	movs	r0, #40	; 0x28
 80003f8:	f7ff ff8e 	bl	8000318 <delay_us>
    if (!(DHT11_PORT->IDR & DHT11_PIN)) {
 80003fc:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <DHT11_CheckResponse+0x44>)
 80003fe:	691b      	ldr	r3, [r3, #16]
 8000400:	f003 0304 	and.w	r3, r3, #4
 8000404:	2b00      	cmp	r3, #0
 8000406:	d10d      	bne.n	8000424 <DHT11_CheckResponse+0x38>
        delay_us(80);
 8000408:	2050      	movs	r0, #80	; 0x50
 800040a:	f7ff ff85 	bl	8000318 <delay_us>
        if (DHT11_PORT->IDR & DHT11_PIN) response = 1;
 800040e:	4b08      	ldr	r3, [pc, #32]	; (8000430 <DHT11_CheckResponse+0x44>)
 8000410:	691b      	ldr	r3, [r3, #16]
 8000412:	f003 0304 	and.w	r3, r3, #4
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <DHT11_CheckResponse+0x32>
 800041a:	2301      	movs	r3, #1
 800041c:	71fb      	strb	r3, [r7, #7]
        delay_us(40);
 800041e:	2028      	movs	r0, #40	; 0x28
 8000420:	f7ff ff7a 	bl	8000318 <delay_us>
    }
    return response;
 8000424:	79fb      	ldrb	r3, [r7, #7]
}
 8000426:	4618      	mov	r0, r3
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40020c00 	.word	0x40020c00

08000434 <DHT11_ReadByte>:

uint8_t DHT11_ReadByte(void) {
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
    uint8_t data = 0;
 800043a:	2300      	movs	r3, #0
 800043c:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 800043e:	2300      	movs	r3, #0
 8000440:	603b      	str	r3, [r7, #0]
 8000442:	e025      	b.n	8000490 <DHT11_ReadByte+0x5c>
        while (!(DHT11_PORT->IDR & DHT11_PIN));
 8000444:	bf00      	nop
 8000446:	4b16      	ldr	r3, [pc, #88]	; (80004a0 <DHT11_ReadByte+0x6c>)
 8000448:	691b      	ldr	r3, [r3, #16]
 800044a:	f003 0304 	and.w	r3, r3, #4
 800044e:	2b00      	cmp	r3, #0
 8000450:	d0f9      	beq.n	8000446 <DHT11_ReadByte+0x12>
        delay_us(40);
 8000452:	2028      	movs	r0, #40	; 0x28
 8000454:	f7ff ff60 	bl	8000318 <delay_us>
        if (DHT11_PORT->IDR & DHT11_PIN) data |= (1 << (7 - i));
 8000458:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <DHT11_ReadByte+0x6c>)
 800045a:	691b      	ldr	r3, [r3, #16]
 800045c:	f003 0304 	and.w	r3, r3, #4
 8000460:	2b00      	cmp	r3, #0
 8000462:	d00b      	beq.n	800047c <DHT11_ReadByte+0x48>
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	f1c3 0307 	rsb	r3, r3, #7
 800046a:	2201      	movs	r2, #1
 800046c:	fa02 f303 	lsl.w	r3, r2, r3
 8000470:	b25a      	sxtb	r2, r3
 8000472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000476:	4313      	orrs	r3, r2
 8000478:	b25b      	sxtb	r3, r3
 800047a:	71fb      	strb	r3, [r7, #7]
        while (DHT11_PORT->IDR & DHT11_PIN);
 800047c:	bf00      	nop
 800047e:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <DHT11_ReadByte+0x6c>)
 8000480:	691b      	ldr	r3, [r3, #16]
 8000482:	f003 0304 	and.w	r3, r3, #4
 8000486:	2b00      	cmp	r3, #0
 8000488:	d1f9      	bne.n	800047e <DHT11_ReadByte+0x4a>
    for (int i = 0; i < 8; i++) {
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	3301      	adds	r3, #1
 800048e:	603b      	str	r3, [r7, #0]
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	2b07      	cmp	r3, #7
 8000494:	ddd6      	ble.n	8000444 <DHT11_ReadByte+0x10>
    }
    return data;
 8000496:	79fb      	ldrb	r3, [r7, #7]
}
 8000498:	4618      	mov	r0, r3
 800049a:	3708      	adds	r7, #8
 800049c:	46bd      	mov	sp, r7
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	40020c00 	.word	0x40020c00

080004a4 <DHT11_ReadData>:

void DHT11_ReadData(uint8_t *humidity, uint8_t *temperature) {
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	6039      	str	r1, [r7, #0]
    uint8_t hum_int, hum_dec, temp_int, temp_dec, checksum;
    DHT11_Start();
 80004ae:	f7ff ff7f 	bl	80003b0 <DHT11_Start>
    if (DHT11_CheckResponse()) {
 80004b2:	f7ff ff9b 	bl	80003ec <DHT11_CheckResponse>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d023      	beq.n	8000504 <DHT11_ReadData+0x60>
        hum_int = DHT11_ReadByte();
 80004bc:	f7ff ffba 	bl	8000434 <DHT11_ReadByte>
 80004c0:	4603      	mov	r3, r0
 80004c2:	73fb      	strb	r3, [r7, #15]
        hum_dec = DHT11_ReadByte();
 80004c4:	f7ff ffb6 	bl	8000434 <DHT11_ReadByte>
 80004c8:	4603      	mov	r3, r0
 80004ca:	73bb      	strb	r3, [r7, #14]
        temp_int = DHT11_ReadByte();
 80004cc:	f7ff ffb2 	bl	8000434 <DHT11_ReadByte>
 80004d0:	4603      	mov	r3, r0
 80004d2:	737b      	strb	r3, [r7, #13]
        temp_dec = DHT11_ReadByte();
 80004d4:	f7ff ffae 	bl	8000434 <DHT11_ReadByte>
 80004d8:	4603      	mov	r3, r0
 80004da:	733b      	strb	r3, [r7, #12]
        checksum = DHT11_ReadByte();
 80004dc:	f7ff ffaa 	bl	8000434 <DHT11_ReadByte>
 80004e0:	4603      	mov	r3, r0
 80004e2:	72fb      	strb	r3, [r7, #11]
        if ((hum_int + hum_dec + temp_int + temp_dec) == checksum) {
 80004e4:	7bfa      	ldrb	r2, [r7, #15]
 80004e6:	7bbb      	ldrb	r3, [r7, #14]
 80004e8:	441a      	add	r2, r3
 80004ea:	7b7b      	ldrb	r3, [r7, #13]
 80004ec:	441a      	add	r2, r3
 80004ee:	7b3b      	ldrb	r3, [r7, #12]
 80004f0:	441a      	add	r2, r3
 80004f2:	7afb      	ldrb	r3, [r7, #11]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	d105      	bne.n	8000504 <DHT11_ReadData+0x60>
            *humidity = hum_int;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	7bfa      	ldrb	r2, [r7, #15]
 80004fc:	701a      	strb	r2, [r3, #0]
            *temperature = temp_int;
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	7b7a      	ldrb	r2, [r7, #13]
 8000502:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8000504:	bf00      	nop
 8000506:	3710      	adds	r7, #16
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}

0800050c <main>:
#include "dht11.h"

#define APB1_FREQ 42000000
#define BAUD_RATE 9600

int main(){
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
	clockConfig();
 8000512:	f7ff fead 	bl	8000270 <clockConfig>
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000516:	4b16      	ldr	r3, [pc, #88]	; (8000570 <main+0x64>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	4a15      	ldr	r2, [pc, #84]	; (8000570 <main+0x64>)
 800051c:	f043 0308 	orr.w	r3, r3, #8
 8000520:	6313      	str	r3, [r2, #48]	; 0x30
	initTimer2();
 8000522:	f000 f89f 	bl	8000664 <initTimer2>
	initTimer3();
 8000526:	f000 f903 	bl	8000730 <initTimer3>
	initUART();
 800052a:	f000 f91f 	bl	800076c <initUART>
	uint8_t temperature=0, humidity=0;
 800052e:	2300      	movs	r3, #0
 8000530:	71fb      	strb	r3, [r7, #7]
 8000532:	2300      	movs	r3, #0
 8000534:	71bb      	strb	r3, [r7, #6]

	while (1){
		sendString("Measuring...");
 8000536:	480f      	ldr	r0, [pc, #60]	; (8000574 <main+0x68>)
 8000538:	f000 f96e 	bl	8000818 <sendString>
		DHT11_ReadData(&humidity, &temperature);
 800053c:	1dfa      	adds	r2, r7, #7
 800053e:	1dbb      	adds	r3, r7, #6
 8000540:	4611      	mov	r1, r2
 8000542:	4618      	mov	r0, r3
 8000544:	f7ff ffae 	bl	80004a4 <DHT11_ReadData>
		sendString("Temperature: ");
 8000548:	480b      	ldr	r0, [pc, #44]	; (8000578 <main+0x6c>)
 800054a:	f000 f965 	bl	8000818 <sendString>
		sendInteger(temperature);
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	4618      	mov	r0, r3
 8000552:	f000 f977 	bl	8000844 <sendInteger>
		sendString("Humidity: ");
 8000556:	4809      	ldr	r0, [pc, #36]	; (800057c <main+0x70>)
 8000558:	f000 f95e 	bl	8000818 <sendString>
		sendInteger(humidity);
 800055c:	79bb      	ldrb	r3, [r7, #6]
 800055e:	4618      	mov	r0, r3
 8000560:	f000 f970 	bl	8000844 <sendInteger>
		delay_milli(2000);
 8000564:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000568:	f000 f89c 	bl	80006a4 <delay_milli>
		sendString("Measuring...");
 800056c:	e7e3      	b.n	8000536 <main+0x2a>
 800056e:	bf00      	nop
 8000570:	40023800 	.word	0x40023800
 8000574:	08001234 	.word	0x08001234
 8000578:	08001244 	.word	0x08001244
 800057c:	08001254 	.word	0x08001254

08000580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000584:	e7fe      	b.n	8000584 <NMI_Handler+0x4>

08000586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800058a:	e7fe      	b.n	800058a <HardFault_Handler+0x4>

0800058c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000590:	e7fe      	b.n	8000590 <MemManage_Handler+0x4>

08000592 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000596:	e7fe      	b.n	8000596 <BusFault_Handler+0x4>

08000598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800059c:	e7fe      	b.n	800059c <UsageFault_Handler+0x4>

0800059e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005be:	bf00      	nop
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005cc:	f000 f97a 	bl	80008c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005dc:	4a14      	ldr	r2, [pc, #80]	; (8000630 <_sbrk+0x5c>)
 80005de:	4b15      	ldr	r3, [pc, #84]	; (8000634 <_sbrk+0x60>)
 80005e0:	1ad3      	subs	r3, r2, r3
 80005e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <_sbrk+0x64>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d102      	bne.n	80005f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005f0:	4b11      	ldr	r3, [pc, #68]	; (8000638 <_sbrk+0x64>)
 80005f2:	4a12      	ldr	r2, [pc, #72]	; (800063c <_sbrk+0x68>)
 80005f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005f6:	4b10      	ldr	r3, [pc, #64]	; (8000638 <_sbrk+0x64>)
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4413      	add	r3, r2
 80005fe:	693a      	ldr	r2, [r7, #16]
 8000600:	429a      	cmp	r2, r3
 8000602:	d207      	bcs.n	8000614 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000604:	f000 f972 	bl	80008ec <__errno>
 8000608:	4603      	mov	r3, r0
 800060a:	220c      	movs	r2, #12
 800060c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800060e:	f04f 33ff 	mov.w	r3, #4294967295
 8000612:	e009      	b.n	8000628 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <_sbrk+0x64>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800061a:	4b07      	ldr	r3, [pc, #28]	; (8000638 <_sbrk+0x64>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4413      	add	r3, r2
 8000622:	4a05      	ldr	r2, [pc, #20]	; (8000638 <_sbrk+0x64>)
 8000624:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000626:	68fb      	ldr	r3, [r7, #12]
}
 8000628:	4618      	mov	r0, r3
 800062a:	3718      	adds	r7, #24
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20020000 	.word	0x20020000
 8000634:	00000400 	.word	0x00000400
 8000638:	20000088 	.word	0x20000088
 800063c:	200000a0 	.word	0x200000a0

08000640 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <SystemInit+0x20>)
 8000646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800064a:	4a05      	ldr	r2, [pc, #20]	; (8000660 <SystemInit+0x20>)
 800064c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000650:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	e000ed00 	.word	0xe000ed00

08000664 <initTimer2>:
#include "stm32f4xx.h"
#include <stdint.h>

#define APB1_FREQ 42000000

void initTimer2(){
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= (1<<0); //enable timer 2
 8000668:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <initTimer2+0x3c>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	4a0c      	ldr	r2, [pc, #48]	; (80006a0 <initTimer2+0x3c>)
 800066e:	f043 0301 	orr.w	r3, r3, #1
 8000672:	6413      	str	r3, [r2, #64]	; 0x40
	TIM2->PSC = 42000 - 1;
 8000674:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000678:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800067c:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->CR1 |= (1<<0); //enable counter for timer2
 800067e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6013      	str	r3, [r2, #0]
	TIM2->CNT = 0;// set the current counter value is 0
 800068e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000692:	2200      	movs	r2, #0
 8000694:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000696:	bf00      	nop
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	40023800 	.word	0x40023800

080006a4 <delay_milli>:
void delay_milli(unsigned int ms){
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	unsigned int arr = (ms*(APB1_FREQ/1000))/(TIM2->PSC - 1);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f24a 4210 	movw	r2, #42000	; 0xa410
 80006b2:	fb03 f202 	mul.w	r2, r3, r2
 80006b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006bc:	3b01      	subs	r3, #1
 80006be:	fbb2 f3f3 	udiv	r3, r2, r3
 80006c2:	60fb      	str	r3, [r7, #12]
	TIM2->ARR = arr;
 80006c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->CNT = 0; // Reset counter to 0
 80006cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006d0:	2200      	movs	r2, #0
 80006d2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->SR &= ~(1<<0); // Clear update flag
 80006d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006d8:	691b      	ldr	r3, [r3, #16]
 80006da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006de:	f023 0301 	bic.w	r3, r3, #1
 80006e2:	6113      	str	r3, [r2, #16]
	TIM2->CR1 |= (1<<0); // Enable timer
 80006e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	6013      	str	r3, [r2, #0]

	while(!(TIM2->SR & (1<<0))){};
 80006f4:	bf00      	nop
 80006f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006fa:	691b      	ldr	r3, [r3, #16]
 80006fc:	f003 0301 	and.w	r3, r3, #1
 8000700:	2b00      	cmp	r3, #0
 8000702:	d0f8      	beq.n	80006f6 <delay_milli+0x52>
	TIM2->CR1 &= ~(1<<0);
 8000704:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800070e:	f023 0301 	bic.w	r3, r3, #1
 8000712:	6013      	str	r3, [r2, #0]
	TIM2->SR &= ~(1<<0);
 8000714:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000718:	691b      	ldr	r3, [r3, #16]
 800071a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800071e:	f023 0301 	bic.w	r3, r3, #1
 8000722:	6113      	str	r3, [r2, #16]
}
 8000724:	bf00      	nop
 8000726:	3714      	adds	r7, #20
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <initTimer3>:
void initTimer3(){
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= (1<<1); //enable timer 3
 8000734:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <initTimer3+0x34>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	4a0a      	ldr	r2, [pc, #40]	; (8000764 <initTimer3+0x34>)
 800073a:	f043 0302 	orr.w	r3, r3, #2
 800073e:	6413      	str	r3, [r2, #64]	; 0x40
	TIM3->PSC = 42 - 1;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <initTimer3+0x38>)
 8000742:	2229      	movs	r2, #41	; 0x29
 8000744:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->CR1 |= (1<<0); //enable counter for timer3
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <initTimer3+0x38>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a07      	ldr	r2, [pc, #28]	; (8000768 <initTimer3+0x38>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	6013      	str	r3, [r2, #0]
	TIM3->CNT = 0;// set the current counter value is 0
 8000752:	4b05      	ldr	r3, [pc, #20]	; (8000768 <initTimer3+0x38>)
 8000754:	2200      	movs	r2, #0
 8000756:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40000400 	.word	0x40000400

0800076c <initUART>:
#include <string.h>

#define APB1_FREQ 42000000
#define BAUD_RATE 9600

void initUART(){
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= (1<<17); //enable USART 2
 8000770:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <initUART+0x70>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000774:	4a19      	ldr	r2, [pc, #100]	; (80007dc <initUART+0x70>)
 8000776:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800077a:	6413      	str	r3, [r2, #64]	; 0x40
    RCC->AHB1ENR |= (1<<0); //enable port A
 800077c:	4b17      	ldr	r3, [pc, #92]	; (80007dc <initUART+0x70>)
 800077e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000780:	4a16      	ldr	r2, [pc, #88]	; (80007dc <initUART+0x70>)
 8000782:	f043 0301 	orr.w	r3, r3, #1
 8000786:	6313      	str	r3, [r2, #48]	; 0x30

    GPIOA->MODER |= (2<<4)|(2<<6); //alternate function for pin 2 and pin 3 PA
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <initUART+0x74>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a14      	ldr	r2, [pc, #80]	; (80007e0 <initUART+0x74>)
 800078e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000792:	6013      	str	r3, [r2, #0]
    GPIOA->OSPEEDR |= (3<<4)|(3<<6); //highspeed mode
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <initUART+0x74>)
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	4a11      	ldr	r2, [pc, #68]	; (80007e0 <initUART+0x74>)
 800079a:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800079e:	6093      	str	r3, [r2, #8]
    GPIOA->AFR[0] |= (7<<8)|(7<<12); //enable usart alternate function for pin 2 pin 3;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <initUART+0x74>)
 80007a2:	6a1b      	ldr	r3, [r3, #32]
 80007a4:	4a0e      	ldr	r2, [pc, #56]	; (80007e0 <initUART+0x74>)
 80007a6:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80007aa:	6213      	str	r3, [r2, #32]

    USART2->CR1 = 0x00; //clear all - Clear M, PCE, and PS bits
 80007ac:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <initUART+0x78>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]

    USART2->BRR = (7<<0) | (273<<4);
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <initUART+0x78>)
 80007b4:	f241 1217 	movw	r2, #4375	; 0x1117
 80007b8:	609a      	str	r2, [r3, #8]
//    uint32_t baudrate = 9600;
//    uint32_t pclk1 = 42000000; // Assuming APB1 clock is 42 MHz
//    uint32_t usartdiv = (pclk1 + (baudrate / 2U)) / baudrate; // Round to nearest integer
//    USART2->BRR = usartdiv;

    USART2->CR1 |= (1<<2)|(1<<3); //enable tx and rx of usart 2
 80007ba:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <initUART+0x78>)
 80007bc:	68db      	ldr	r3, [r3, #12]
 80007be:	4a09      	ldr	r2, [pc, #36]	; (80007e4 <initUART+0x78>)
 80007c0:	f043 030c 	orr.w	r3, r3, #12
 80007c4:	60d3      	str	r3, [r2, #12]
    USART2->CR1 |= (1<<13); //enable bit UE == enable usart 2
 80007c6:	4b07      	ldr	r3, [pc, #28]	; (80007e4 <initUART+0x78>)
 80007c8:	68db      	ldr	r3, [r3, #12]
 80007ca:	4a06      	ldr	r2, [pc, #24]	; (80007e4 <initUART+0x78>)
 80007cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007d0:	60d3      	str	r3, [r2, #12]
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40020000 	.word	0x40020000
 80007e4:	40004400 	.word	0x40004400

080007e8 <sendChar>:

void sendChar(char ch){
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
    // Wait until transmit data register is empty
    while (!(USART2->SR & USART_SR_TXE));
 80007f2:	bf00      	nop
 80007f4:	4b07      	ldr	r3, [pc, #28]	; (8000814 <sendChar+0x2c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d0f9      	beq.n	80007f4 <sendChar+0xc>
    // Send character
    USART2->DR = ch;
 8000800:	4a04      	ldr	r2, [pc, #16]	; (8000814 <sendChar+0x2c>)
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	6053      	str	r3, [r2, #4]
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	40004400 	.word	0x40004400

08000818 <sendString>:

void sendString(const char* str){
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000820:	e006      	b.n	8000830 <sendString+0x18>
        sendChar(*str++);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	1c5a      	adds	r2, r3, #1
 8000826:	607a      	str	r2, [r7, #4]
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff ffdc 	bl	80007e8 <sendChar>
    while (*str) {
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d1f4      	bne.n	8000822 <sendString+0xa>
    }
}
 8000838:	bf00      	nop
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <sendInteger>:
void sendInteger(int num){
 8000844:	b580      	push	{r7, lr}
 8000846:	b090      	sub	sp, #64	; 0x40
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	char buffer[50];
	sprintf(buffer, "%d", num);
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	4906      	ldr	r1, [pc, #24]	; (800086c <sendInteger+0x28>)
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f873 	bl	8000940 <siprintf>
	sendString(buffer);
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff ffda 	bl	8000818 <sendString>
}
 8000864:	bf00      	nop
 8000866:	3740      	adds	r7, #64	; 0x40
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	08001260 	.word	0x08001260

08000870 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000870:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000874:	480d      	ldr	r0, [pc, #52]	; (80008ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000876:	490e      	ldr	r1, [pc, #56]	; (80008b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000878:	4a0e      	ldr	r2, [pc, #56]	; (80008b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800087a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800087c:	e002      	b.n	8000884 <LoopCopyDataInit>

0800087e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800087e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000882:	3304      	adds	r3, #4

08000884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000888:	d3f9      	bcc.n	800087e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800088a:	4a0b      	ldr	r2, [pc, #44]	; (80008b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800088c:	4c0b      	ldr	r4, [pc, #44]	; (80008bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800088e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000890:	e001      	b.n	8000896 <LoopFillZerobss>

08000892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000894:	3204      	adds	r2, #4

08000896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000898:	d3fb      	bcc.n	8000892 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800089a:	f7ff fed1 	bl	8000640 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800089e:	f000 f82b 	bl	80008f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008a2:	f7ff fe33 	bl	800050c <main>
  bx  lr    
 80008a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80008b4:	080012a0 	.word	0x080012a0
  ldr r2, =_sbss
 80008b8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80008bc:	200000a0 	.word	0x200000a0

080008c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008c0:	e7fe      	b.n	80008c0 <ADC_IRQHandler>
	...

080008c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_IncTick+0x20>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	461a      	mov	r2, r3
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <HAL_IncTick+0x24>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4413      	add	r3, r2
 80008d4:	4a04      	ldr	r2, [pc, #16]	; (80008e8 <HAL_IncTick+0x24>)
 80008d6:	6013      	str	r3, [r2, #0]
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	20000004 	.word	0x20000004
 80008e8:	2000008c 	.word	0x2000008c

080008ec <__errno>:
 80008ec:	4b01      	ldr	r3, [pc, #4]	; (80008f4 <__errno+0x8>)
 80008ee:	6818      	ldr	r0, [r3, #0]
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	20000008 	.word	0x20000008

080008f8 <__libc_init_array>:
 80008f8:	b570      	push	{r4, r5, r6, lr}
 80008fa:	4d0d      	ldr	r5, [pc, #52]	; (8000930 <__libc_init_array+0x38>)
 80008fc:	4c0d      	ldr	r4, [pc, #52]	; (8000934 <__libc_init_array+0x3c>)
 80008fe:	1b64      	subs	r4, r4, r5
 8000900:	10a4      	asrs	r4, r4, #2
 8000902:	2600      	movs	r6, #0
 8000904:	42a6      	cmp	r6, r4
 8000906:	d109      	bne.n	800091c <__libc_init_array+0x24>
 8000908:	4d0b      	ldr	r5, [pc, #44]	; (8000938 <__libc_init_array+0x40>)
 800090a:	4c0c      	ldr	r4, [pc, #48]	; (800093c <__libc_init_array+0x44>)
 800090c:	f000 fc86 	bl	800121c <_init>
 8000910:	1b64      	subs	r4, r4, r5
 8000912:	10a4      	asrs	r4, r4, #2
 8000914:	2600      	movs	r6, #0
 8000916:	42a6      	cmp	r6, r4
 8000918:	d105      	bne.n	8000926 <__libc_init_array+0x2e>
 800091a:	bd70      	pop	{r4, r5, r6, pc}
 800091c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000920:	4798      	blx	r3
 8000922:	3601      	adds	r6, #1
 8000924:	e7ee      	b.n	8000904 <__libc_init_array+0xc>
 8000926:	f855 3b04 	ldr.w	r3, [r5], #4
 800092a:	4798      	blx	r3
 800092c:	3601      	adds	r6, #1
 800092e:	e7f2      	b.n	8000916 <__libc_init_array+0x1e>
 8000930:	08001298 	.word	0x08001298
 8000934:	08001298 	.word	0x08001298
 8000938:	08001298 	.word	0x08001298
 800093c:	0800129c 	.word	0x0800129c

08000940 <siprintf>:
 8000940:	b40e      	push	{r1, r2, r3}
 8000942:	b500      	push	{lr}
 8000944:	b09c      	sub	sp, #112	; 0x70
 8000946:	ab1d      	add	r3, sp, #116	; 0x74
 8000948:	9002      	str	r0, [sp, #8]
 800094a:	9006      	str	r0, [sp, #24]
 800094c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000950:	4809      	ldr	r0, [pc, #36]	; (8000978 <siprintf+0x38>)
 8000952:	9107      	str	r1, [sp, #28]
 8000954:	9104      	str	r1, [sp, #16]
 8000956:	4909      	ldr	r1, [pc, #36]	; (800097c <siprintf+0x3c>)
 8000958:	f853 2b04 	ldr.w	r2, [r3], #4
 800095c:	9105      	str	r1, [sp, #20]
 800095e:	6800      	ldr	r0, [r0, #0]
 8000960:	9301      	str	r3, [sp, #4]
 8000962:	a902      	add	r1, sp, #8
 8000964:	f000 f868 	bl	8000a38 <_svfiprintf_r>
 8000968:	9b02      	ldr	r3, [sp, #8]
 800096a:	2200      	movs	r2, #0
 800096c:	701a      	strb	r2, [r3, #0]
 800096e:	b01c      	add	sp, #112	; 0x70
 8000970:	f85d eb04 	ldr.w	lr, [sp], #4
 8000974:	b003      	add	sp, #12
 8000976:	4770      	bx	lr
 8000978:	20000008 	.word	0x20000008
 800097c:	ffff0208 	.word	0xffff0208

08000980 <__ssputs_r>:
 8000980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000984:	688e      	ldr	r6, [r1, #8]
 8000986:	429e      	cmp	r6, r3
 8000988:	4682      	mov	sl, r0
 800098a:	460c      	mov	r4, r1
 800098c:	4690      	mov	r8, r2
 800098e:	461f      	mov	r7, r3
 8000990:	d838      	bhi.n	8000a04 <__ssputs_r+0x84>
 8000992:	898a      	ldrh	r2, [r1, #12]
 8000994:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000998:	d032      	beq.n	8000a00 <__ssputs_r+0x80>
 800099a:	6825      	ldr	r5, [r4, #0]
 800099c:	6909      	ldr	r1, [r1, #16]
 800099e:	eba5 0901 	sub.w	r9, r5, r1
 80009a2:	6965      	ldr	r5, [r4, #20]
 80009a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80009a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80009ac:	3301      	adds	r3, #1
 80009ae:	444b      	add	r3, r9
 80009b0:	106d      	asrs	r5, r5, #1
 80009b2:	429d      	cmp	r5, r3
 80009b4:	bf38      	it	cc
 80009b6:	461d      	movcc	r5, r3
 80009b8:	0553      	lsls	r3, r2, #21
 80009ba:	d531      	bpl.n	8000a20 <__ssputs_r+0xa0>
 80009bc:	4629      	mov	r1, r5
 80009be:	f000 fb63 	bl	8001088 <_malloc_r>
 80009c2:	4606      	mov	r6, r0
 80009c4:	b950      	cbnz	r0, 80009dc <__ssputs_r+0x5c>
 80009c6:	230c      	movs	r3, #12
 80009c8:	f8ca 3000 	str.w	r3, [sl]
 80009cc:	89a3      	ldrh	r3, [r4, #12]
 80009ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009d2:	81a3      	strh	r3, [r4, #12]
 80009d4:	f04f 30ff 	mov.w	r0, #4294967295
 80009d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009dc:	6921      	ldr	r1, [r4, #16]
 80009de:	464a      	mov	r2, r9
 80009e0:	f000 fabe 	bl	8000f60 <memcpy>
 80009e4:	89a3      	ldrh	r3, [r4, #12]
 80009e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80009ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ee:	81a3      	strh	r3, [r4, #12]
 80009f0:	6126      	str	r6, [r4, #16]
 80009f2:	6165      	str	r5, [r4, #20]
 80009f4:	444e      	add	r6, r9
 80009f6:	eba5 0509 	sub.w	r5, r5, r9
 80009fa:	6026      	str	r6, [r4, #0]
 80009fc:	60a5      	str	r5, [r4, #8]
 80009fe:	463e      	mov	r6, r7
 8000a00:	42be      	cmp	r6, r7
 8000a02:	d900      	bls.n	8000a06 <__ssputs_r+0x86>
 8000a04:	463e      	mov	r6, r7
 8000a06:	6820      	ldr	r0, [r4, #0]
 8000a08:	4632      	mov	r2, r6
 8000a0a:	4641      	mov	r1, r8
 8000a0c:	f000 fab6 	bl	8000f7c <memmove>
 8000a10:	68a3      	ldr	r3, [r4, #8]
 8000a12:	1b9b      	subs	r3, r3, r6
 8000a14:	60a3      	str	r3, [r4, #8]
 8000a16:	6823      	ldr	r3, [r4, #0]
 8000a18:	4433      	add	r3, r6
 8000a1a:	6023      	str	r3, [r4, #0]
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	e7db      	b.n	80009d8 <__ssputs_r+0x58>
 8000a20:	462a      	mov	r2, r5
 8000a22:	f000 fba5 	bl	8001170 <_realloc_r>
 8000a26:	4606      	mov	r6, r0
 8000a28:	2800      	cmp	r0, #0
 8000a2a:	d1e1      	bne.n	80009f0 <__ssputs_r+0x70>
 8000a2c:	6921      	ldr	r1, [r4, #16]
 8000a2e:	4650      	mov	r0, sl
 8000a30:	f000 fabe 	bl	8000fb0 <_free_r>
 8000a34:	e7c7      	b.n	80009c6 <__ssputs_r+0x46>
	...

08000a38 <_svfiprintf_r>:
 8000a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a3c:	4698      	mov	r8, r3
 8000a3e:	898b      	ldrh	r3, [r1, #12]
 8000a40:	061b      	lsls	r3, r3, #24
 8000a42:	b09d      	sub	sp, #116	; 0x74
 8000a44:	4607      	mov	r7, r0
 8000a46:	460d      	mov	r5, r1
 8000a48:	4614      	mov	r4, r2
 8000a4a:	d50e      	bpl.n	8000a6a <_svfiprintf_r+0x32>
 8000a4c:	690b      	ldr	r3, [r1, #16]
 8000a4e:	b963      	cbnz	r3, 8000a6a <_svfiprintf_r+0x32>
 8000a50:	2140      	movs	r1, #64	; 0x40
 8000a52:	f000 fb19 	bl	8001088 <_malloc_r>
 8000a56:	6028      	str	r0, [r5, #0]
 8000a58:	6128      	str	r0, [r5, #16]
 8000a5a:	b920      	cbnz	r0, 8000a66 <_svfiprintf_r+0x2e>
 8000a5c:	230c      	movs	r3, #12
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	e0d1      	b.n	8000c0a <_svfiprintf_r+0x1d2>
 8000a66:	2340      	movs	r3, #64	; 0x40
 8000a68:	616b      	str	r3, [r5, #20]
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8000a6e:	2320      	movs	r3, #32
 8000a70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000a74:	f8cd 800c 	str.w	r8, [sp, #12]
 8000a78:	2330      	movs	r3, #48	; 0x30
 8000a7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000c24 <_svfiprintf_r+0x1ec>
 8000a7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000a82:	f04f 0901 	mov.w	r9, #1
 8000a86:	4623      	mov	r3, r4
 8000a88:	469a      	mov	sl, r3
 8000a8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000a8e:	b10a      	cbz	r2, 8000a94 <_svfiprintf_r+0x5c>
 8000a90:	2a25      	cmp	r2, #37	; 0x25
 8000a92:	d1f9      	bne.n	8000a88 <_svfiprintf_r+0x50>
 8000a94:	ebba 0b04 	subs.w	fp, sl, r4
 8000a98:	d00b      	beq.n	8000ab2 <_svfiprintf_r+0x7a>
 8000a9a:	465b      	mov	r3, fp
 8000a9c:	4622      	mov	r2, r4
 8000a9e:	4629      	mov	r1, r5
 8000aa0:	4638      	mov	r0, r7
 8000aa2:	f7ff ff6d 	bl	8000980 <__ssputs_r>
 8000aa6:	3001      	adds	r0, #1
 8000aa8:	f000 80aa 	beq.w	8000c00 <_svfiprintf_r+0x1c8>
 8000aac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000aae:	445a      	add	r2, fp
 8000ab0:	9209      	str	r2, [sp, #36]	; 0x24
 8000ab2:	f89a 3000 	ldrb.w	r3, [sl]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f000 80a2 	beq.w	8000c00 <_svfiprintf_r+0x1c8>
 8000abc:	2300      	movs	r3, #0
 8000abe:	f04f 32ff 	mov.w	r2, #4294967295
 8000ac2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ac6:	f10a 0a01 	add.w	sl, sl, #1
 8000aca:	9304      	str	r3, [sp, #16]
 8000acc:	9307      	str	r3, [sp, #28]
 8000ace:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000ad2:	931a      	str	r3, [sp, #104]	; 0x68
 8000ad4:	4654      	mov	r4, sl
 8000ad6:	2205      	movs	r2, #5
 8000ad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000adc:	4851      	ldr	r0, [pc, #324]	; (8000c24 <_svfiprintf_r+0x1ec>)
 8000ade:	f7ff fb77 	bl	80001d0 <memchr>
 8000ae2:	9a04      	ldr	r2, [sp, #16]
 8000ae4:	b9d8      	cbnz	r0, 8000b1e <_svfiprintf_r+0xe6>
 8000ae6:	06d0      	lsls	r0, r2, #27
 8000ae8:	bf44      	itt	mi
 8000aea:	2320      	movmi	r3, #32
 8000aec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000af0:	0711      	lsls	r1, r2, #28
 8000af2:	bf44      	itt	mi
 8000af4:	232b      	movmi	r3, #43	; 0x2b
 8000af6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000afa:	f89a 3000 	ldrb.w	r3, [sl]
 8000afe:	2b2a      	cmp	r3, #42	; 0x2a
 8000b00:	d015      	beq.n	8000b2e <_svfiprintf_r+0xf6>
 8000b02:	9a07      	ldr	r2, [sp, #28]
 8000b04:	4654      	mov	r4, sl
 8000b06:	2000      	movs	r0, #0
 8000b08:	f04f 0c0a 	mov.w	ip, #10
 8000b0c:	4621      	mov	r1, r4
 8000b0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b12:	3b30      	subs	r3, #48	; 0x30
 8000b14:	2b09      	cmp	r3, #9
 8000b16:	d94e      	bls.n	8000bb6 <_svfiprintf_r+0x17e>
 8000b18:	b1b0      	cbz	r0, 8000b48 <_svfiprintf_r+0x110>
 8000b1a:	9207      	str	r2, [sp, #28]
 8000b1c:	e014      	b.n	8000b48 <_svfiprintf_r+0x110>
 8000b1e:	eba0 0308 	sub.w	r3, r0, r8
 8000b22:	fa09 f303 	lsl.w	r3, r9, r3
 8000b26:	4313      	orrs	r3, r2
 8000b28:	9304      	str	r3, [sp, #16]
 8000b2a:	46a2      	mov	sl, r4
 8000b2c:	e7d2      	b.n	8000ad4 <_svfiprintf_r+0x9c>
 8000b2e:	9b03      	ldr	r3, [sp, #12]
 8000b30:	1d19      	adds	r1, r3, #4
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	9103      	str	r1, [sp, #12]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	bfbb      	ittet	lt
 8000b3a:	425b      	neglt	r3, r3
 8000b3c:	f042 0202 	orrlt.w	r2, r2, #2
 8000b40:	9307      	strge	r3, [sp, #28]
 8000b42:	9307      	strlt	r3, [sp, #28]
 8000b44:	bfb8      	it	lt
 8000b46:	9204      	strlt	r2, [sp, #16]
 8000b48:	7823      	ldrb	r3, [r4, #0]
 8000b4a:	2b2e      	cmp	r3, #46	; 0x2e
 8000b4c:	d10c      	bne.n	8000b68 <_svfiprintf_r+0x130>
 8000b4e:	7863      	ldrb	r3, [r4, #1]
 8000b50:	2b2a      	cmp	r3, #42	; 0x2a
 8000b52:	d135      	bne.n	8000bc0 <_svfiprintf_r+0x188>
 8000b54:	9b03      	ldr	r3, [sp, #12]
 8000b56:	1d1a      	adds	r2, r3, #4
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	9203      	str	r2, [sp, #12]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	bfb8      	it	lt
 8000b60:	f04f 33ff 	movlt.w	r3, #4294967295
 8000b64:	3402      	adds	r4, #2
 8000b66:	9305      	str	r3, [sp, #20]
 8000b68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000c34 <_svfiprintf_r+0x1fc>
 8000b6c:	7821      	ldrb	r1, [r4, #0]
 8000b6e:	2203      	movs	r2, #3
 8000b70:	4650      	mov	r0, sl
 8000b72:	f7ff fb2d 	bl	80001d0 <memchr>
 8000b76:	b140      	cbz	r0, 8000b8a <_svfiprintf_r+0x152>
 8000b78:	2340      	movs	r3, #64	; 0x40
 8000b7a:	eba0 000a 	sub.w	r0, r0, sl
 8000b7e:	fa03 f000 	lsl.w	r0, r3, r0
 8000b82:	9b04      	ldr	r3, [sp, #16]
 8000b84:	4303      	orrs	r3, r0
 8000b86:	3401      	adds	r4, #1
 8000b88:	9304      	str	r3, [sp, #16]
 8000b8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b8e:	4826      	ldr	r0, [pc, #152]	; (8000c28 <_svfiprintf_r+0x1f0>)
 8000b90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000b94:	2206      	movs	r2, #6
 8000b96:	f7ff fb1b 	bl	80001d0 <memchr>
 8000b9a:	2800      	cmp	r0, #0
 8000b9c:	d038      	beq.n	8000c10 <_svfiprintf_r+0x1d8>
 8000b9e:	4b23      	ldr	r3, [pc, #140]	; (8000c2c <_svfiprintf_r+0x1f4>)
 8000ba0:	bb1b      	cbnz	r3, 8000bea <_svfiprintf_r+0x1b2>
 8000ba2:	9b03      	ldr	r3, [sp, #12]
 8000ba4:	3307      	adds	r3, #7
 8000ba6:	f023 0307 	bic.w	r3, r3, #7
 8000baa:	3308      	adds	r3, #8
 8000bac:	9303      	str	r3, [sp, #12]
 8000bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000bb0:	4433      	add	r3, r6
 8000bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8000bb4:	e767      	b.n	8000a86 <_svfiprintf_r+0x4e>
 8000bb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8000bba:	460c      	mov	r4, r1
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	e7a5      	b.n	8000b0c <_svfiprintf_r+0xd4>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	3401      	adds	r4, #1
 8000bc4:	9305      	str	r3, [sp, #20]
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	f04f 0c0a 	mov.w	ip, #10
 8000bcc:	4620      	mov	r0, r4
 8000bce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000bd2:	3a30      	subs	r2, #48	; 0x30
 8000bd4:	2a09      	cmp	r2, #9
 8000bd6:	d903      	bls.n	8000be0 <_svfiprintf_r+0x1a8>
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d0c5      	beq.n	8000b68 <_svfiprintf_r+0x130>
 8000bdc:	9105      	str	r1, [sp, #20]
 8000bde:	e7c3      	b.n	8000b68 <_svfiprintf_r+0x130>
 8000be0:	fb0c 2101 	mla	r1, ip, r1, r2
 8000be4:	4604      	mov	r4, r0
 8000be6:	2301      	movs	r3, #1
 8000be8:	e7f0      	b.n	8000bcc <_svfiprintf_r+0x194>
 8000bea:	ab03      	add	r3, sp, #12
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	462a      	mov	r2, r5
 8000bf0:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <_svfiprintf_r+0x1f8>)
 8000bf2:	a904      	add	r1, sp, #16
 8000bf4:	4638      	mov	r0, r7
 8000bf6:	f3af 8000 	nop.w
 8000bfa:	1c42      	adds	r2, r0, #1
 8000bfc:	4606      	mov	r6, r0
 8000bfe:	d1d6      	bne.n	8000bae <_svfiprintf_r+0x176>
 8000c00:	89ab      	ldrh	r3, [r5, #12]
 8000c02:	065b      	lsls	r3, r3, #25
 8000c04:	f53f af2c 	bmi.w	8000a60 <_svfiprintf_r+0x28>
 8000c08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000c0a:	b01d      	add	sp, #116	; 0x74
 8000c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c10:	ab03      	add	r3, sp, #12
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	462a      	mov	r2, r5
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <_svfiprintf_r+0x1f8>)
 8000c18:	a904      	add	r1, sp, #16
 8000c1a:	4638      	mov	r0, r7
 8000c1c:	f000 f87a 	bl	8000d14 <_printf_i>
 8000c20:	e7eb      	b.n	8000bfa <_svfiprintf_r+0x1c2>
 8000c22:	bf00      	nop
 8000c24:	08001263 	.word	0x08001263
 8000c28:	0800126d 	.word	0x0800126d
 8000c2c:	00000000 	.word	0x00000000
 8000c30:	08000981 	.word	0x08000981
 8000c34:	08001269 	.word	0x08001269

08000c38 <_printf_common>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	4616      	mov	r6, r2
 8000c3e:	4699      	mov	r9, r3
 8000c40:	688a      	ldr	r2, [r1, #8]
 8000c42:	690b      	ldr	r3, [r1, #16]
 8000c44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	bfb8      	it	lt
 8000c4c:	4613      	movlt	r3, r2
 8000c4e:	6033      	str	r3, [r6, #0]
 8000c50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000c54:	4607      	mov	r7, r0
 8000c56:	460c      	mov	r4, r1
 8000c58:	b10a      	cbz	r2, 8000c5e <_printf_common+0x26>
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	6033      	str	r3, [r6, #0]
 8000c5e:	6823      	ldr	r3, [r4, #0]
 8000c60:	0699      	lsls	r1, r3, #26
 8000c62:	bf42      	ittt	mi
 8000c64:	6833      	ldrmi	r3, [r6, #0]
 8000c66:	3302      	addmi	r3, #2
 8000c68:	6033      	strmi	r3, [r6, #0]
 8000c6a:	6825      	ldr	r5, [r4, #0]
 8000c6c:	f015 0506 	ands.w	r5, r5, #6
 8000c70:	d106      	bne.n	8000c80 <_printf_common+0x48>
 8000c72:	f104 0a19 	add.w	sl, r4, #25
 8000c76:	68e3      	ldr	r3, [r4, #12]
 8000c78:	6832      	ldr	r2, [r6, #0]
 8000c7a:	1a9b      	subs	r3, r3, r2
 8000c7c:	42ab      	cmp	r3, r5
 8000c7e:	dc26      	bgt.n	8000cce <_printf_common+0x96>
 8000c80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000c84:	1e13      	subs	r3, r2, #0
 8000c86:	6822      	ldr	r2, [r4, #0]
 8000c88:	bf18      	it	ne
 8000c8a:	2301      	movne	r3, #1
 8000c8c:	0692      	lsls	r2, r2, #26
 8000c8e:	d42b      	bmi.n	8000ce8 <_printf_common+0xb0>
 8000c90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000c94:	4649      	mov	r1, r9
 8000c96:	4638      	mov	r0, r7
 8000c98:	47c0      	blx	r8
 8000c9a:	3001      	adds	r0, #1
 8000c9c:	d01e      	beq.n	8000cdc <_printf_common+0xa4>
 8000c9e:	6823      	ldr	r3, [r4, #0]
 8000ca0:	68e5      	ldr	r5, [r4, #12]
 8000ca2:	6832      	ldr	r2, [r6, #0]
 8000ca4:	f003 0306 	and.w	r3, r3, #6
 8000ca8:	2b04      	cmp	r3, #4
 8000caa:	bf08      	it	eq
 8000cac:	1aad      	subeq	r5, r5, r2
 8000cae:	68a3      	ldr	r3, [r4, #8]
 8000cb0:	6922      	ldr	r2, [r4, #16]
 8000cb2:	bf0c      	ite	eq
 8000cb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000cb8:	2500      	movne	r5, #0
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	bfc4      	itt	gt
 8000cbe:	1a9b      	subgt	r3, r3, r2
 8000cc0:	18ed      	addgt	r5, r5, r3
 8000cc2:	2600      	movs	r6, #0
 8000cc4:	341a      	adds	r4, #26
 8000cc6:	42b5      	cmp	r5, r6
 8000cc8:	d11a      	bne.n	8000d00 <_printf_common+0xc8>
 8000cca:	2000      	movs	r0, #0
 8000ccc:	e008      	b.n	8000ce0 <_printf_common+0xa8>
 8000cce:	2301      	movs	r3, #1
 8000cd0:	4652      	mov	r2, sl
 8000cd2:	4649      	mov	r1, r9
 8000cd4:	4638      	mov	r0, r7
 8000cd6:	47c0      	blx	r8
 8000cd8:	3001      	adds	r0, #1
 8000cda:	d103      	bne.n	8000ce4 <_printf_common+0xac>
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	3501      	adds	r5, #1
 8000ce6:	e7c6      	b.n	8000c76 <_printf_common+0x3e>
 8000ce8:	18e1      	adds	r1, r4, r3
 8000cea:	1c5a      	adds	r2, r3, #1
 8000cec:	2030      	movs	r0, #48	; 0x30
 8000cee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000cf2:	4422      	add	r2, r4
 8000cf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000cf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000cfc:	3302      	adds	r3, #2
 8000cfe:	e7c7      	b.n	8000c90 <_printf_common+0x58>
 8000d00:	2301      	movs	r3, #1
 8000d02:	4622      	mov	r2, r4
 8000d04:	4649      	mov	r1, r9
 8000d06:	4638      	mov	r0, r7
 8000d08:	47c0      	blx	r8
 8000d0a:	3001      	adds	r0, #1
 8000d0c:	d0e6      	beq.n	8000cdc <_printf_common+0xa4>
 8000d0e:	3601      	adds	r6, #1
 8000d10:	e7d9      	b.n	8000cc6 <_printf_common+0x8e>
	...

08000d14 <_printf_i>:
 8000d14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d18:	7e0f      	ldrb	r7, [r1, #24]
 8000d1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000d1c:	2f78      	cmp	r7, #120	; 0x78
 8000d1e:	4691      	mov	r9, r2
 8000d20:	4680      	mov	r8, r0
 8000d22:	460c      	mov	r4, r1
 8000d24:	469a      	mov	sl, r3
 8000d26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000d2a:	d807      	bhi.n	8000d3c <_printf_i+0x28>
 8000d2c:	2f62      	cmp	r7, #98	; 0x62
 8000d2e:	d80a      	bhi.n	8000d46 <_printf_i+0x32>
 8000d30:	2f00      	cmp	r7, #0
 8000d32:	f000 80d8 	beq.w	8000ee6 <_printf_i+0x1d2>
 8000d36:	2f58      	cmp	r7, #88	; 0x58
 8000d38:	f000 80a3 	beq.w	8000e82 <_printf_i+0x16e>
 8000d3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000d40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000d44:	e03a      	b.n	8000dbc <_printf_i+0xa8>
 8000d46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000d4a:	2b15      	cmp	r3, #21
 8000d4c:	d8f6      	bhi.n	8000d3c <_printf_i+0x28>
 8000d4e:	a101      	add	r1, pc, #4	; (adr r1, 8000d54 <_printf_i+0x40>)
 8000d50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000d54:	08000dad 	.word	0x08000dad
 8000d58:	08000dc1 	.word	0x08000dc1
 8000d5c:	08000d3d 	.word	0x08000d3d
 8000d60:	08000d3d 	.word	0x08000d3d
 8000d64:	08000d3d 	.word	0x08000d3d
 8000d68:	08000d3d 	.word	0x08000d3d
 8000d6c:	08000dc1 	.word	0x08000dc1
 8000d70:	08000d3d 	.word	0x08000d3d
 8000d74:	08000d3d 	.word	0x08000d3d
 8000d78:	08000d3d 	.word	0x08000d3d
 8000d7c:	08000d3d 	.word	0x08000d3d
 8000d80:	08000ecd 	.word	0x08000ecd
 8000d84:	08000df1 	.word	0x08000df1
 8000d88:	08000eaf 	.word	0x08000eaf
 8000d8c:	08000d3d 	.word	0x08000d3d
 8000d90:	08000d3d 	.word	0x08000d3d
 8000d94:	08000eef 	.word	0x08000eef
 8000d98:	08000d3d 	.word	0x08000d3d
 8000d9c:	08000df1 	.word	0x08000df1
 8000da0:	08000d3d 	.word	0x08000d3d
 8000da4:	08000d3d 	.word	0x08000d3d
 8000da8:	08000eb7 	.word	0x08000eb7
 8000dac:	682b      	ldr	r3, [r5, #0]
 8000dae:	1d1a      	adds	r2, r3, #4
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	602a      	str	r2, [r5, #0]
 8000db4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000db8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e0a3      	b.n	8000f08 <_printf_i+0x1f4>
 8000dc0:	6820      	ldr	r0, [r4, #0]
 8000dc2:	6829      	ldr	r1, [r5, #0]
 8000dc4:	0606      	lsls	r6, r0, #24
 8000dc6:	f101 0304 	add.w	r3, r1, #4
 8000dca:	d50a      	bpl.n	8000de2 <_printf_i+0xce>
 8000dcc:	680e      	ldr	r6, [r1, #0]
 8000dce:	602b      	str	r3, [r5, #0]
 8000dd0:	2e00      	cmp	r6, #0
 8000dd2:	da03      	bge.n	8000ddc <_printf_i+0xc8>
 8000dd4:	232d      	movs	r3, #45	; 0x2d
 8000dd6:	4276      	negs	r6, r6
 8000dd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000ddc:	485e      	ldr	r0, [pc, #376]	; (8000f58 <_printf_i+0x244>)
 8000dde:	230a      	movs	r3, #10
 8000de0:	e019      	b.n	8000e16 <_printf_i+0x102>
 8000de2:	680e      	ldr	r6, [r1, #0]
 8000de4:	602b      	str	r3, [r5, #0]
 8000de6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000dea:	bf18      	it	ne
 8000dec:	b236      	sxthne	r6, r6
 8000dee:	e7ef      	b.n	8000dd0 <_printf_i+0xbc>
 8000df0:	682b      	ldr	r3, [r5, #0]
 8000df2:	6820      	ldr	r0, [r4, #0]
 8000df4:	1d19      	adds	r1, r3, #4
 8000df6:	6029      	str	r1, [r5, #0]
 8000df8:	0601      	lsls	r1, r0, #24
 8000dfa:	d501      	bpl.n	8000e00 <_printf_i+0xec>
 8000dfc:	681e      	ldr	r6, [r3, #0]
 8000dfe:	e002      	b.n	8000e06 <_printf_i+0xf2>
 8000e00:	0646      	lsls	r6, r0, #25
 8000e02:	d5fb      	bpl.n	8000dfc <_printf_i+0xe8>
 8000e04:	881e      	ldrh	r6, [r3, #0]
 8000e06:	4854      	ldr	r0, [pc, #336]	; (8000f58 <_printf_i+0x244>)
 8000e08:	2f6f      	cmp	r7, #111	; 0x6f
 8000e0a:	bf0c      	ite	eq
 8000e0c:	2308      	moveq	r3, #8
 8000e0e:	230a      	movne	r3, #10
 8000e10:	2100      	movs	r1, #0
 8000e12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000e16:	6865      	ldr	r5, [r4, #4]
 8000e18:	60a5      	str	r5, [r4, #8]
 8000e1a:	2d00      	cmp	r5, #0
 8000e1c:	bfa2      	ittt	ge
 8000e1e:	6821      	ldrge	r1, [r4, #0]
 8000e20:	f021 0104 	bicge.w	r1, r1, #4
 8000e24:	6021      	strge	r1, [r4, #0]
 8000e26:	b90e      	cbnz	r6, 8000e2c <_printf_i+0x118>
 8000e28:	2d00      	cmp	r5, #0
 8000e2a:	d04d      	beq.n	8000ec8 <_printf_i+0x1b4>
 8000e2c:	4615      	mov	r5, r2
 8000e2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8000e32:	fb03 6711 	mls	r7, r3, r1, r6
 8000e36:	5dc7      	ldrb	r7, [r0, r7]
 8000e38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000e3c:	4637      	mov	r7, r6
 8000e3e:	42bb      	cmp	r3, r7
 8000e40:	460e      	mov	r6, r1
 8000e42:	d9f4      	bls.n	8000e2e <_printf_i+0x11a>
 8000e44:	2b08      	cmp	r3, #8
 8000e46:	d10b      	bne.n	8000e60 <_printf_i+0x14c>
 8000e48:	6823      	ldr	r3, [r4, #0]
 8000e4a:	07de      	lsls	r6, r3, #31
 8000e4c:	d508      	bpl.n	8000e60 <_printf_i+0x14c>
 8000e4e:	6923      	ldr	r3, [r4, #16]
 8000e50:	6861      	ldr	r1, [r4, #4]
 8000e52:	4299      	cmp	r1, r3
 8000e54:	bfde      	ittt	le
 8000e56:	2330      	movle	r3, #48	; 0x30
 8000e58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000e5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000e60:	1b52      	subs	r2, r2, r5
 8000e62:	6122      	str	r2, [r4, #16]
 8000e64:	f8cd a000 	str.w	sl, [sp]
 8000e68:	464b      	mov	r3, r9
 8000e6a:	aa03      	add	r2, sp, #12
 8000e6c:	4621      	mov	r1, r4
 8000e6e:	4640      	mov	r0, r8
 8000e70:	f7ff fee2 	bl	8000c38 <_printf_common>
 8000e74:	3001      	adds	r0, #1
 8000e76:	d14c      	bne.n	8000f12 <_printf_i+0x1fe>
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7c:	b004      	add	sp, #16
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	4835      	ldr	r0, [pc, #212]	; (8000f58 <_printf_i+0x244>)
 8000e84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8000e88:	6829      	ldr	r1, [r5, #0]
 8000e8a:	6823      	ldr	r3, [r4, #0]
 8000e8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8000e90:	6029      	str	r1, [r5, #0]
 8000e92:	061d      	lsls	r5, r3, #24
 8000e94:	d514      	bpl.n	8000ec0 <_printf_i+0x1ac>
 8000e96:	07df      	lsls	r7, r3, #31
 8000e98:	bf44      	itt	mi
 8000e9a:	f043 0320 	orrmi.w	r3, r3, #32
 8000e9e:	6023      	strmi	r3, [r4, #0]
 8000ea0:	b91e      	cbnz	r6, 8000eaa <_printf_i+0x196>
 8000ea2:	6823      	ldr	r3, [r4, #0]
 8000ea4:	f023 0320 	bic.w	r3, r3, #32
 8000ea8:	6023      	str	r3, [r4, #0]
 8000eaa:	2310      	movs	r3, #16
 8000eac:	e7b0      	b.n	8000e10 <_printf_i+0xfc>
 8000eae:	6823      	ldr	r3, [r4, #0]
 8000eb0:	f043 0320 	orr.w	r3, r3, #32
 8000eb4:	6023      	str	r3, [r4, #0]
 8000eb6:	2378      	movs	r3, #120	; 0x78
 8000eb8:	4828      	ldr	r0, [pc, #160]	; (8000f5c <_printf_i+0x248>)
 8000eba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000ebe:	e7e3      	b.n	8000e88 <_printf_i+0x174>
 8000ec0:	0659      	lsls	r1, r3, #25
 8000ec2:	bf48      	it	mi
 8000ec4:	b2b6      	uxthmi	r6, r6
 8000ec6:	e7e6      	b.n	8000e96 <_printf_i+0x182>
 8000ec8:	4615      	mov	r5, r2
 8000eca:	e7bb      	b.n	8000e44 <_printf_i+0x130>
 8000ecc:	682b      	ldr	r3, [r5, #0]
 8000ece:	6826      	ldr	r6, [r4, #0]
 8000ed0:	6961      	ldr	r1, [r4, #20]
 8000ed2:	1d18      	adds	r0, r3, #4
 8000ed4:	6028      	str	r0, [r5, #0]
 8000ed6:	0635      	lsls	r5, r6, #24
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	d501      	bpl.n	8000ee0 <_printf_i+0x1cc>
 8000edc:	6019      	str	r1, [r3, #0]
 8000ede:	e002      	b.n	8000ee6 <_printf_i+0x1d2>
 8000ee0:	0670      	lsls	r0, r6, #25
 8000ee2:	d5fb      	bpl.n	8000edc <_printf_i+0x1c8>
 8000ee4:	8019      	strh	r1, [r3, #0]
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	6123      	str	r3, [r4, #16]
 8000eea:	4615      	mov	r5, r2
 8000eec:	e7ba      	b.n	8000e64 <_printf_i+0x150>
 8000eee:	682b      	ldr	r3, [r5, #0]
 8000ef0:	1d1a      	adds	r2, r3, #4
 8000ef2:	602a      	str	r2, [r5, #0]
 8000ef4:	681d      	ldr	r5, [r3, #0]
 8000ef6:	6862      	ldr	r2, [r4, #4]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	4628      	mov	r0, r5
 8000efc:	f7ff f968 	bl	80001d0 <memchr>
 8000f00:	b108      	cbz	r0, 8000f06 <_printf_i+0x1f2>
 8000f02:	1b40      	subs	r0, r0, r5
 8000f04:	6060      	str	r0, [r4, #4]
 8000f06:	6863      	ldr	r3, [r4, #4]
 8000f08:	6123      	str	r3, [r4, #16]
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f10:	e7a8      	b.n	8000e64 <_printf_i+0x150>
 8000f12:	6923      	ldr	r3, [r4, #16]
 8000f14:	462a      	mov	r2, r5
 8000f16:	4649      	mov	r1, r9
 8000f18:	4640      	mov	r0, r8
 8000f1a:	47d0      	blx	sl
 8000f1c:	3001      	adds	r0, #1
 8000f1e:	d0ab      	beq.n	8000e78 <_printf_i+0x164>
 8000f20:	6823      	ldr	r3, [r4, #0]
 8000f22:	079b      	lsls	r3, r3, #30
 8000f24:	d413      	bmi.n	8000f4e <_printf_i+0x23a>
 8000f26:	68e0      	ldr	r0, [r4, #12]
 8000f28:	9b03      	ldr	r3, [sp, #12]
 8000f2a:	4298      	cmp	r0, r3
 8000f2c:	bfb8      	it	lt
 8000f2e:	4618      	movlt	r0, r3
 8000f30:	e7a4      	b.n	8000e7c <_printf_i+0x168>
 8000f32:	2301      	movs	r3, #1
 8000f34:	4632      	mov	r2, r6
 8000f36:	4649      	mov	r1, r9
 8000f38:	4640      	mov	r0, r8
 8000f3a:	47d0      	blx	sl
 8000f3c:	3001      	adds	r0, #1
 8000f3e:	d09b      	beq.n	8000e78 <_printf_i+0x164>
 8000f40:	3501      	adds	r5, #1
 8000f42:	68e3      	ldr	r3, [r4, #12]
 8000f44:	9903      	ldr	r1, [sp, #12]
 8000f46:	1a5b      	subs	r3, r3, r1
 8000f48:	42ab      	cmp	r3, r5
 8000f4a:	dcf2      	bgt.n	8000f32 <_printf_i+0x21e>
 8000f4c:	e7eb      	b.n	8000f26 <_printf_i+0x212>
 8000f4e:	2500      	movs	r5, #0
 8000f50:	f104 0619 	add.w	r6, r4, #25
 8000f54:	e7f5      	b.n	8000f42 <_printf_i+0x22e>
 8000f56:	bf00      	nop
 8000f58:	08001274 	.word	0x08001274
 8000f5c:	08001285 	.word	0x08001285

08000f60 <memcpy>:
 8000f60:	440a      	add	r2, r1
 8000f62:	4291      	cmp	r1, r2
 8000f64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f68:	d100      	bne.n	8000f6c <memcpy+0xc>
 8000f6a:	4770      	bx	lr
 8000f6c:	b510      	push	{r4, lr}
 8000f6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000f72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000f76:	4291      	cmp	r1, r2
 8000f78:	d1f9      	bne.n	8000f6e <memcpy+0xe>
 8000f7a:	bd10      	pop	{r4, pc}

08000f7c <memmove>:
 8000f7c:	4288      	cmp	r0, r1
 8000f7e:	b510      	push	{r4, lr}
 8000f80:	eb01 0402 	add.w	r4, r1, r2
 8000f84:	d902      	bls.n	8000f8c <memmove+0x10>
 8000f86:	4284      	cmp	r4, r0
 8000f88:	4623      	mov	r3, r4
 8000f8a:	d807      	bhi.n	8000f9c <memmove+0x20>
 8000f8c:	1e43      	subs	r3, r0, #1
 8000f8e:	42a1      	cmp	r1, r4
 8000f90:	d008      	beq.n	8000fa4 <memmove+0x28>
 8000f92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000f96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000f9a:	e7f8      	b.n	8000f8e <memmove+0x12>
 8000f9c:	4402      	add	r2, r0
 8000f9e:	4601      	mov	r1, r0
 8000fa0:	428a      	cmp	r2, r1
 8000fa2:	d100      	bne.n	8000fa6 <memmove+0x2a>
 8000fa4:	bd10      	pop	{r4, pc}
 8000fa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000faa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000fae:	e7f7      	b.n	8000fa0 <memmove+0x24>

08000fb0 <_free_r>:
 8000fb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000fb2:	2900      	cmp	r1, #0
 8000fb4:	d044      	beq.n	8001040 <_free_r+0x90>
 8000fb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000fba:	9001      	str	r0, [sp, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	f1a1 0404 	sub.w	r4, r1, #4
 8000fc2:	bfb8      	it	lt
 8000fc4:	18e4      	addlt	r4, r4, r3
 8000fc6:	f000 f913 	bl	80011f0 <__malloc_lock>
 8000fca:	4a1e      	ldr	r2, [pc, #120]	; (8001044 <_free_r+0x94>)
 8000fcc:	9801      	ldr	r0, [sp, #4]
 8000fce:	6813      	ldr	r3, [r2, #0]
 8000fd0:	b933      	cbnz	r3, 8000fe0 <_free_r+0x30>
 8000fd2:	6063      	str	r3, [r4, #4]
 8000fd4:	6014      	str	r4, [r2, #0]
 8000fd6:	b003      	add	sp, #12
 8000fd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000fdc:	f000 b90e 	b.w	80011fc <__malloc_unlock>
 8000fe0:	42a3      	cmp	r3, r4
 8000fe2:	d908      	bls.n	8000ff6 <_free_r+0x46>
 8000fe4:	6825      	ldr	r5, [r4, #0]
 8000fe6:	1961      	adds	r1, r4, r5
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	bf01      	itttt	eq
 8000fec:	6819      	ldreq	r1, [r3, #0]
 8000fee:	685b      	ldreq	r3, [r3, #4]
 8000ff0:	1949      	addeq	r1, r1, r5
 8000ff2:	6021      	streq	r1, [r4, #0]
 8000ff4:	e7ed      	b.n	8000fd2 <_free_r+0x22>
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	b10b      	cbz	r3, 8001000 <_free_r+0x50>
 8000ffc:	42a3      	cmp	r3, r4
 8000ffe:	d9fa      	bls.n	8000ff6 <_free_r+0x46>
 8001000:	6811      	ldr	r1, [r2, #0]
 8001002:	1855      	adds	r5, r2, r1
 8001004:	42a5      	cmp	r5, r4
 8001006:	d10b      	bne.n	8001020 <_free_r+0x70>
 8001008:	6824      	ldr	r4, [r4, #0]
 800100a:	4421      	add	r1, r4
 800100c:	1854      	adds	r4, r2, r1
 800100e:	42a3      	cmp	r3, r4
 8001010:	6011      	str	r1, [r2, #0]
 8001012:	d1e0      	bne.n	8000fd6 <_free_r+0x26>
 8001014:	681c      	ldr	r4, [r3, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	6053      	str	r3, [r2, #4]
 800101a:	4421      	add	r1, r4
 800101c:	6011      	str	r1, [r2, #0]
 800101e:	e7da      	b.n	8000fd6 <_free_r+0x26>
 8001020:	d902      	bls.n	8001028 <_free_r+0x78>
 8001022:	230c      	movs	r3, #12
 8001024:	6003      	str	r3, [r0, #0]
 8001026:	e7d6      	b.n	8000fd6 <_free_r+0x26>
 8001028:	6825      	ldr	r5, [r4, #0]
 800102a:	1961      	adds	r1, r4, r5
 800102c:	428b      	cmp	r3, r1
 800102e:	bf04      	itt	eq
 8001030:	6819      	ldreq	r1, [r3, #0]
 8001032:	685b      	ldreq	r3, [r3, #4]
 8001034:	6063      	str	r3, [r4, #4]
 8001036:	bf04      	itt	eq
 8001038:	1949      	addeq	r1, r1, r5
 800103a:	6021      	streq	r1, [r4, #0]
 800103c:	6054      	str	r4, [r2, #4]
 800103e:	e7ca      	b.n	8000fd6 <_free_r+0x26>
 8001040:	b003      	add	sp, #12
 8001042:	bd30      	pop	{r4, r5, pc}
 8001044:	20000090 	.word	0x20000090

08001048 <sbrk_aligned>:
 8001048:	b570      	push	{r4, r5, r6, lr}
 800104a:	4e0e      	ldr	r6, [pc, #56]	; (8001084 <sbrk_aligned+0x3c>)
 800104c:	460c      	mov	r4, r1
 800104e:	6831      	ldr	r1, [r6, #0]
 8001050:	4605      	mov	r5, r0
 8001052:	b911      	cbnz	r1, 800105a <sbrk_aligned+0x12>
 8001054:	f000 f8bc 	bl	80011d0 <_sbrk_r>
 8001058:	6030      	str	r0, [r6, #0]
 800105a:	4621      	mov	r1, r4
 800105c:	4628      	mov	r0, r5
 800105e:	f000 f8b7 	bl	80011d0 <_sbrk_r>
 8001062:	1c43      	adds	r3, r0, #1
 8001064:	d00a      	beq.n	800107c <sbrk_aligned+0x34>
 8001066:	1cc4      	adds	r4, r0, #3
 8001068:	f024 0403 	bic.w	r4, r4, #3
 800106c:	42a0      	cmp	r0, r4
 800106e:	d007      	beq.n	8001080 <sbrk_aligned+0x38>
 8001070:	1a21      	subs	r1, r4, r0
 8001072:	4628      	mov	r0, r5
 8001074:	f000 f8ac 	bl	80011d0 <_sbrk_r>
 8001078:	3001      	adds	r0, #1
 800107a:	d101      	bne.n	8001080 <sbrk_aligned+0x38>
 800107c:	f04f 34ff 	mov.w	r4, #4294967295
 8001080:	4620      	mov	r0, r4
 8001082:	bd70      	pop	{r4, r5, r6, pc}
 8001084:	20000094 	.word	0x20000094

08001088 <_malloc_r>:
 8001088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800108c:	1ccd      	adds	r5, r1, #3
 800108e:	f025 0503 	bic.w	r5, r5, #3
 8001092:	3508      	adds	r5, #8
 8001094:	2d0c      	cmp	r5, #12
 8001096:	bf38      	it	cc
 8001098:	250c      	movcc	r5, #12
 800109a:	2d00      	cmp	r5, #0
 800109c:	4607      	mov	r7, r0
 800109e:	db01      	blt.n	80010a4 <_malloc_r+0x1c>
 80010a0:	42a9      	cmp	r1, r5
 80010a2:	d905      	bls.n	80010b0 <_malloc_r+0x28>
 80010a4:	230c      	movs	r3, #12
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	2600      	movs	r6, #0
 80010aa:	4630      	mov	r0, r6
 80010ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010b0:	4e2e      	ldr	r6, [pc, #184]	; (800116c <_malloc_r+0xe4>)
 80010b2:	f000 f89d 	bl	80011f0 <__malloc_lock>
 80010b6:	6833      	ldr	r3, [r6, #0]
 80010b8:	461c      	mov	r4, r3
 80010ba:	bb34      	cbnz	r4, 800110a <_malloc_r+0x82>
 80010bc:	4629      	mov	r1, r5
 80010be:	4638      	mov	r0, r7
 80010c0:	f7ff ffc2 	bl	8001048 <sbrk_aligned>
 80010c4:	1c43      	adds	r3, r0, #1
 80010c6:	4604      	mov	r4, r0
 80010c8:	d14d      	bne.n	8001166 <_malloc_r+0xde>
 80010ca:	6834      	ldr	r4, [r6, #0]
 80010cc:	4626      	mov	r6, r4
 80010ce:	2e00      	cmp	r6, #0
 80010d0:	d140      	bne.n	8001154 <_malloc_r+0xcc>
 80010d2:	6823      	ldr	r3, [r4, #0]
 80010d4:	4631      	mov	r1, r6
 80010d6:	4638      	mov	r0, r7
 80010d8:	eb04 0803 	add.w	r8, r4, r3
 80010dc:	f000 f878 	bl	80011d0 <_sbrk_r>
 80010e0:	4580      	cmp	r8, r0
 80010e2:	d13a      	bne.n	800115a <_malloc_r+0xd2>
 80010e4:	6821      	ldr	r1, [r4, #0]
 80010e6:	3503      	adds	r5, #3
 80010e8:	1a6d      	subs	r5, r5, r1
 80010ea:	f025 0503 	bic.w	r5, r5, #3
 80010ee:	3508      	adds	r5, #8
 80010f0:	2d0c      	cmp	r5, #12
 80010f2:	bf38      	it	cc
 80010f4:	250c      	movcc	r5, #12
 80010f6:	4629      	mov	r1, r5
 80010f8:	4638      	mov	r0, r7
 80010fa:	f7ff ffa5 	bl	8001048 <sbrk_aligned>
 80010fe:	3001      	adds	r0, #1
 8001100:	d02b      	beq.n	800115a <_malloc_r+0xd2>
 8001102:	6823      	ldr	r3, [r4, #0]
 8001104:	442b      	add	r3, r5
 8001106:	6023      	str	r3, [r4, #0]
 8001108:	e00e      	b.n	8001128 <_malloc_r+0xa0>
 800110a:	6822      	ldr	r2, [r4, #0]
 800110c:	1b52      	subs	r2, r2, r5
 800110e:	d41e      	bmi.n	800114e <_malloc_r+0xc6>
 8001110:	2a0b      	cmp	r2, #11
 8001112:	d916      	bls.n	8001142 <_malloc_r+0xba>
 8001114:	1961      	adds	r1, r4, r5
 8001116:	42a3      	cmp	r3, r4
 8001118:	6025      	str	r5, [r4, #0]
 800111a:	bf18      	it	ne
 800111c:	6059      	strne	r1, [r3, #4]
 800111e:	6863      	ldr	r3, [r4, #4]
 8001120:	bf08      	it	eq
 8001122:	6031      	streq	r1, [r6, #0]
 8001124:	5162      	str	r2, [r4, r5]
 8001126:	604b      	str	r3, [r1, #4]
 8001128:	4638      	mov	r0, r7
 800112a:	f104 060b 	add.w	r6, r4, #11
 800112e:	f000 f865 	bl	80011fc <__malloc_unlock>
 8001132:	f026 0607 	bic.w	r6, r6, #7
 8001136:	1d23      	adds	r3, r4, #4
 8001138:	1af2      	subs	r2, r6, r3
 800113a:	d0b6      	beq.n	80010aa <_malloc_r+0x22>
 800113c:	1b9b      	subs	r3, r3, r6
 800113e:	50a3      	str	r3, [r4, r2]
 8001140:	e7b3      	b.n	80010aa <_malloc_r+0x22>
 8001142:	6862      	ldr	r2, [r4, #4]
 8001144:	42a3      	cmp	r3, r4
 8001146:	bf0c      	ite	eq
 8001148:	6032      	streq	r2, [r6, #0]
 800114a:	605a      	strne	r2, [r3, #4]
 800114c:	e7ec      	b.n	8001128 <_malloc_r+0xa0>
 800114e:	4623      	mov	r3, r4
 8001150:	6864      	ldr	r4, [r4, #4]
 8001152:	e7b2      	b.n	80010ba <_malloc_r+0x32>
 8001154:	4634      	mov	r4, r6
 8001156:	6876      	ldr	r6, [r6, #4]
 8001158:	e7b9      	b.n	80010ce <_malloc_r+0x46>
 800115a:	230c      	movs	r3, #12
 800115c:	603b      	str	r3, [r7, #0]
 800115e:	4638      	mov	r0, r7
 8001160:	f000 f84c 	bl	80011fc <__malloc_unlock>
 8001164:	e7a1      	b.n	80010aa <_malloc_r+0x22>
 8001166:	6025      	str	r5, [r4, #0]
 8001168:	e7de      	b.n	8001128 <_malloc_r+0xa0>
 800116a:	bf00      	nop
 800116c:	20000090 	.word	0x20000090

08001170 <_realloc_r>:
 8001170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001174:	4680      	mov	r8, r0
 8001176:	4614      	mov	r4, r2
 8001178:	460e      	mov	r6, r1
 800117a:	b921      	cbnz	r1, 8001186 <_realloc_r+0x16>
 800117c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001180:	4611      	mov	r1, r2
 8001182:	f7ff bf81 	b.w	8001088 <_malloc_r>
 8001186:	b92a      	cbnz	r2, 8001194 <_realloc_r+0x24>
 8001188:	f7ff ff12 	bl	8000fb0 <_free_r>
 800118c:	4625      	mov	r5, r4
 800118e:	4628      	mov	r0, r5
 8001190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001194:	f000 f838 	bl	8001208 <_malloc_usable_size_r>
 8001198:	4284      	cmp	r4, r0
 800119a:	4607      	mov	r7, r0
 800119c:	d802      	bhi.n	80011a4 <_realloc_r+0x34>
 800119e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80011a2:	d812      	bhi.n	80011ca <_realloc_r+0x5a>
 80011a4:	4621      	mov	r1, r4
 80011a6:	4640      	mov	r0, r8
 80011a8:	f7ff ff6e 	bl	8001088 <_malloc_r>
 80011ac:	4605      	mov	r5, r0
 80011ae:	2800      	cmp	r0, #0
 80011b0:	d0ed      	beq.n	800118e <_realloc_r+0x1e>
 80011b2:	42bc      	cmp	r4, r7
 80011b4:	4622      	mov	r2, r4
 80011b6:	4631      	mov	r1, r6
 80011b8:	bf28      	it	cs
 80011ba:	463a      	movcs	r2, r7
 80011bc:	f7ff fed0 	bl	8000f60 <memcpy>
 80011c0:	4631      	mov	r1, r6
 80011c2:	4640      	mov	r0, r8
 80011c4:	f7ff fef4 	bl	8000fb0 <_free_r>
 80011c8:	e7e1      	b.n	800118e <_realloc_r+0x1e>
 80011ca:	4635      	mov	r5, r6
 80011cc:	e7df      	b.n	800118e <_realloc_r+0x1e>
	...

080011d0 <_sbrk_r>:
 80011d0:	b538      	push	{r3, r4, r5, lr}
 80011d2:	4d06      	ldr	r5, [pc, #24]	; (80011ec <_sbrk_r+0x1c>)
 80011d4:	2300      	movs	r3, #0
 80011d6:	4604      	mov	r4, r0
 80011d8:	4608      	mov	r0, r1
 80011da:	602b      	str	r3, [r5, #0]
 80011dc:	f7ff f9fa 	bl	80005d4 <_sbrk>
 80011e0:	1c43      	adds	r3, r0, #1
 80011e2:	d102      	bne.n	80011ea <_sbrk_r+0x1a>
 80011e4:	682b      	ldr	r3, [r5, #0]
 80011e6:	b103      	cbz	r3, 80011ea <_sbrk_r+0x1a>
 80011e8:	6023      	str	r3, [r4, #0]
 80011ea:	bd38      	pop	{r3, r4, r5, pc}
 80011ec:	20000098 	.word	0x20000098

080011f0 <__malloc_lock>:
 80011f0:	4801      	ldr	r0, [pc, #4]	; (80011f8 <__malloc_lock+0x8>)
 80011f2:	f000 b811 	b.w	8001218 <__retarget_lock_acquire_recursive>
 80011f6:	bf00      	nop
 80011f8:	2000009c 	.word	0x2000009c

080011fc <__malloc_unlock>:
 80011fc:	4801      	ldr	r0, [pc, #4]	; (8001204 <__malloc_unlock+0x8>)
 80011fe:	f000 b80c 	b.w	800121a <__retarget_lock_release_recursive>
 8001202:	bf00      	nop
 8001204:	2000009c 	.word	0x2000009c

08001208 <_malloc_usable_size_r>:
 8001208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800120c:	1f18      	subs	r0, r3, #4
 800120e:	2b00      	cmp	r3, #0
 8001210:	bfbc      	itt	lt
 8001212:	580b      	ldrlt	r3, [r1, r0]
 8001214:	18c0      	addlt	r0, r0, r3
 8001216:	4770      	bx	lr

08001218 <__retarget_lock_acquire_recursive>:
 8001218:	4770      	bx	lr

0800121a <__retarget_lock_release_recursive>:
 800121a:	4770      	bx	lr

0800121c <_init>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	bf00      	nop
 8001220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001222:	bc08      	pop	{r3}
 8001224:	469e      	mov	lr, r3
 8001226:	4770      	bx	lr

08001228 <_fini>:
 8001228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800122a:	bf00      	nop
 800122c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800122e:	bc08      	pop	{r3}
 8001230:	469e      	mov	lr, r3
 8001232:	4770      	bx	lr
